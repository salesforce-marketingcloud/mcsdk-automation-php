<?php
/**
 * AssetApi
 * PHP version 5
 *
 * @category Class
 * @package  SalesForce\MarketingCloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing Cloud REST API
 *
 * Marketing Cloud's REST API is our newest API. It supports multi-channel use cases, is much more lightweight and easy to use than our SOAP API, and is getting more comprehensive with every release.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mc_sdk@salesforce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.7
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SalesForce\MarketingCloud\Api;

use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use SalesForce\MarketingCloud\Api\Exception\InvalidRequestException;
use SalesForce\MarketingCloud\ApiException;
use SalesForce\MarketingCloud\ObjectSerializer;


/**
 * AssetApi Class Doc Comment
 *
 * @category Class
 * @package  SalesForce\MarketingCloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AssetApi extends AbstractApi
{

    /**
     * Operation createAsset
     *
     * createAsset
     *
     * @param  \SalesForce\MarketingCloud\Model\Asset $body JSON Parameters (required)
     *
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     * @return \SalesForce\MarketingCloud\Model\Asset
     */
    public function createAsset(\SalesForce\MarketingCloud\Model\Asset $body)
    {
        list($response) = $this->createAssetWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createAssetWithHttpInfo
     *
     * createAsset
     *
     * @param  \SalesForce\MarketingCloud\Model\Asset $body JSON Parameters (required)
     *
     * @return array of \SalesForce\MarketingCloud\Model\Asset, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     */
    public function createAssetWithHttpInfo(\SalesForce\MarketingCloud\Model\Asset $body)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\Asset';
        $request = $this->createAssetRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                /** @var \GuzzleHttp\Psr7\Response $response */
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = \GuzzleHttp\json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\Asset',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAssetAsync
     *
     * createAsset
     *
     * @param  \SalesForce\MarketingCloud\Model\Asset $body JSON Parameters (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     */
    public function createAssetAsync(\SalesForce\MarketingCloud\Model\Asset $body)
    {
        return $this->createAssetAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAssetAsyncWithHttpInfo
     *
     * createAsset
     *
     * @param  \SalesForce\MarketingCloud\Model\Asset $body JSON Parameters (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws Exception\ClientUnauthorizedException
     * @throws \InvalidArgumentException
     */
    public function createAssetAsyncWithHttpInfo(\SalesForce\MarketingCloud\Model\Asset $body)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\Asset';
        $request = $this->createAssetRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = \GuzzleHttp\json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    /** @var \GuzzleHttp\Exception\RequestException $exception */
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAsset'
     *
     * @param  \SalesForce\MarketingCloud\Model\Asset $body JSON Parameters (required)
     *
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createAssetRequest(\SalesForce\MarketingCloud\Model\Asset $body)
    {
        if (isset($body) && !$body->valid()) {
            throw new InvalidRequestException($body, "The request data is invalid");
        }

        $this->authorizeClient();

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createAsset'
            );
        }

        $resourcePath = '/asset/v1/content/assets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        // Set the header for the authorization access token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $headers['User-Agent'] = static::getUserAgent();

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAssetById
     *
     * deleteAssetById
     *
     * @param  float $id The ID of the asset to delete (required)
     *
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     * @return void
     */
    public function deleteAssetById(float $id)
    {
        $this->deleteAssetByIdWithHttpInfo($id);
    }

    /**
     * Operation deleteAssetByIdWithHttpInfo
     *
     * deleteAssetById
     *
     * @param  float $id The ID of the asset to delete (required)
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     */
    public function deleteAssetByIdWithHttpInfo(float $id)
    {
        $returnType = '';
        $request = $this->deleteAssetByIdRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                /** @var \GuzzleHttp\Psr7\Response $response */
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAssetByIdAsync
     *
     * deleteAssetById
     *
     * @param  float $id The ID of the asset to delete (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     */
    public function deleteAssetByIdAsync(float $id)
    {
        return $this->deleteAssetByIdAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAssetByIdAsyncWithHttpInfo
     *
     * deleteAssetById
     *
     * @param  float $id The ID of the asset to delete (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws Exception\ClientUnauthorizedException
     * @throws \InvalidArgumentException
     */
    public function deleteAssetByIdAsyncWithHttpInfo(float $id)
    {
        $returnType = '';
        $request = $this->deleteAssetByIdRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    /** @var \GuzzleHttp\Exception\RequestException $exception */
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAssetById'
     *
     * @param  float $id The ID of the asset to delete (required)
     *
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAssetByIdRequest(float $id)
    {
        if (isset($body) && !$body->valid()) {
            throw new InvalidRequestException($body, "The request data is invalid");
        }

        $this->authorizeClient();

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteAssetById'
            );
        }

        $resourcePath = '/asset/v1/content/assets/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        // Set the header for the authorization access token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $headers['User-Agent'] = static::getUserAgent();

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAssetById
     *
     * getAssetById
     *
     * @param  float $id The ID of the asset (required)
     *
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     * @return \SalesForce\MarketingCloud\Model\Asset
     */
    public function getAssetById(float $id)
    {
        list($response) = $this->getAssetByIdWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getAssetByIdWithHttpInfo
     *
     * getAssetById
     *
     * @param  float $id The ID of the asset (required)
     *
     * @return array of \SalesForce\MarketingCloud\Model\Asset, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     */
    public function getAssetByIdWithHttpInfo(float $id)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\Asset';
        $request = $this->getAssetByIdRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                /** @var \GuzzleHttp\Psr7\Response $response */
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = \GuzzleHttp\json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\Asset',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAssetByIdAsync
     *
     * getAssetById
     *
     * @param  float $id The ID of the asset (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     */
    public function getAssetByIdAsync(float $id)
    {
        return $this->getAssetByIdAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAssetByIdAsyncWithHttpInfo
     *
     * getAssetById
     *
     * @param  float $id The ID of the asset (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws Exception\ClientUnauthorizedException
     * @throws \InvalidArgumentException
     */
    public function getAssetByIdAsyncWithHttpInfo(float $id)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\Asset';
        $request = $this->getAssetByIdRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = \GuzzleHttp\json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    /** @var \GuzzleHttp\Exception\RequestException $exception */
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAssetById'
     *
     * @param  float $id The ID of the asset (required)
     *
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAssetByIdRequest(float $id)
    {
        if (isset($body) && !$body->valid()) {
            throw new InvalidRequestException($body, "The request data is invalid");
        }

        $this->authorizeClient();

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getAssetById'
            );
        }

        $resourcePath = '/asset/v1/content/assets/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        // Set the header for the authorization access token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $headers['User-Agent'] = static::getUserAgent();

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation partiallyUpdateAssetById
     *
     * partiallyUpdateAssetById
     *
     * @param  float $id The ID of the asset to update (required)
     * @param  \SalesForce\MarketingCloud\Model\Asset $body JSON Parameters (required)
     *
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     * @return \SalesForce\MarketingCloud\Model\Asset
     */
    public function partiallyUpdateAssetById(float $id, \SalesForce\MarketingCloud\Model\Asset $body)
    {
        list($response) = $this->partiallyUpdateAssetByIdWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation partiallyUpdateAssetByIdWithHttpInfo
     *
     * partiallyUpdateAssetById
     *
     * @param  float $id The ID of the asset to update (required)
     * @param  \SalesForce\MarketingCloud\Model\Asset $body JSON Parameters (required)
     *
     * @return array of \SalesForce\MarketingCloud\Model\Asset, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \SalesForce\MarketingCloud\ApiException on non-2xx response
     */
    public function partiallyUpdateAssetByIdWithHttpInfo(float $id, \SalesForce\MarketingCloud\Model\Asset $body)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\Asset';
        $request = $this->partiallyUpdateAssetByIdRequest($id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                /** @var \GuzzleHttp\Psr7\Response $response */
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = \GuzzleHttp\json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\Asset',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SalesForce\MarketingCloud\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation partiallyUpdateAssetByIdAsync
     *
     * partiallyUpdateAssetById
     *
     * @param  float $id The ID of the asset to update (required)
     * @param  \SalesForce\MarketingCloud\Model\Asset $body JSON Parameters (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     */
    public function partiallyUpdateAssetByIdAsync(float $id, \SalesForce\MarketingCloud\Model\Asset $body)
    {
        return $this->partiallyUpdateAssetByIdAsyncWithHttpInfo($id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation partiallyUpdateAssetByIdAsyncWithHttpInfo
     *
     * partiallyUpdateAssetById
     *
     * @param  float $id The ID of the asset to update (required)
     * @param  \SalesForce\MarketingCloud\Model\Asset $body JSON Parameters (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws Exception\ClientUnauthorizedException
     * @throws \InvalidArgumentException
     */
    public function partiallyUpdateAssetByIdAsyncWithHttpInfo(float $id, \SalesForce\MarketingCloud\Model\Asset $body)
    {
        $returnType = '\SalesForce\MarketingCloud\Model\Asset';
        $request = $this->partiallyUpdateAssetByIdRequest($id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = \GuzzleHttp\json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    /** @var \GuzzleHttp\Psr7\Response $response */
                    /** @var \GuzzleHttp\Exception\RequestException $exception */
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'partiallyUpdateAssetById'
     *
     * @param  float $id The ID of the asset to update (required)
     * @param  \SalesForce\MarketingCloud\Model\Asset $body JSON Parameters (required)
     *
     * @throws \InvalidArgumentException
     * @throws Exception\ClientUnauthorizedException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function partiallyUpdateAssetByIdRequest(float $id, \SalesForce\MarketingCloud\Model\Asset $body)
    {
        if (isset($body) && !$body->valid()) {
            throw new InvalidRequestException($body, "The request data is invalid");
        }

        $this->authorizeClient();

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling partiallyUpdateAssetById'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling partiallyUpdateAssetById'
            );
        }

        $resourcePath = '/asset/v1/content/assets/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        // Set the header for the authorization access token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $headers['User-Agent'] = static::getUserAgent();

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

}
