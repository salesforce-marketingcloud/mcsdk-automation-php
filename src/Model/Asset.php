<?php
/**
 * Asset
 *
 * PHP version 5
 *
 * @category Class
 * @package  SalesForce\MarketingCloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing Cloud REST API
 *
 * Marketing Cloud's REST API is our newest API. It supports multi-channel use cases, is much more lightweight and easy to use than our SOAP API, and is getting more comprehensive with every release.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: mc_sdk@salesforce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SalesForce\MarketingCloud\Model;

use \ArrayAccess;
use \SalesForce\MarketingCloud\ObjectSerializer;

/**
 * Asset Class Doc Comment
 *
 * @category Class
 * @package  SalesForce\MarketingCloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Asset implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Asset';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'float',
        'customerKey' => 'string',
        'contentType' => 'string',
        'data' => 'object',
        'assetType' => '\SalesForce\MarketingCloud\Model\AssetType',
        'version' => 'float',
        'locked' => 'bool',
        'fileProperties' => 'object',
        'name' => 'string',
        'description' => 'string',
        'category' => 'object',
        'tags' => 'string[]',
        'content' => 'string',
        'design' => 'string',
        'superContent' => 'string',
        'customFields' => 'object',
        'views' => 'object',
        'blocks' => 'object',
        'minBlocks' => 'float',
        'maxBlocks' => 'float',
        'channels' => 'object',
        'allowedBlocks' => 'string[]',
        'slots' => 'object',
        'businessUnitAvailability' => 'object',
        'sharingProperties' => '\SalesForce\MarketingCloud\Model\SharingProperties',
        'template' => 'object',
        'file' => 'string',
        'generateFrom' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'customerKey' => null,
        'contentType' => null,
        'data' => null,
        'assetType' => null,
        'version' => null,
        'locked' => null,
        'fileProperties' => null,
        'name' => null,
        'description' => null,
        'category' => null,
        'tags' => null,
        'content' => null,
        'design' => null,
        'superContent' => null,
        'customFields' => null,
        'views' => null,
        'blocks' => null,
        'minBlocks' => null,
        'maxBlocks' => null,
        'channels' => null,
        'allowedBlocks' => null,
        'slots' => null,
        'businessUnitAvailability' => null,
        'sharingProperties' => null,
        'template' => null,
        'file' => null,
        'generateFrom' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'customerKey' => 'customerKey',
        'contentType' => 'contentType',
        'data' => 'data',
        'assetType' => 'assetType',
        'version' => 'version',
        'locked' => 'locked',
        'fileProperties' => 'fileProperties',
        'name' => 'name',
        'description' => 'description',
        'category' => 'category',
        'tags' => 'tags',
        'content' => 'content',
        'design' => 'design',
        'superContent' => 'superContent',
        'customFields' => 'customFields',
        'views' => 'views',
        'blocks' => 'blocks',
        'minBlocks' => 'minBlocks',
        'maxBlocks' => 'maxBlocks',
        'channels' => 'channels',
        'allowedBlocks' => 'allowedBlocks',
        'slots' => 'slots',
        'businessUnitAvailability' => 'businessUnitAvailability',
        'sharingProperties' => 'sharingProperties',
        'template' => 'template',
        'file' => 'file',
        'generateFrom' => 'generateFrom'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'customerKey' => 'setCustomerKey',
        'contentType' => 'setContentType',
        'data' => 'setData',
        'assetType' => 'setAssetType',
        'version' => 'setVersion',
        'locked' => 'setLocked',
        'fileProperties' => 'setFileProperties',
        'name' => 'setName',
        'description' => 'setDescription',
        'category' => 'setCategory',
        'tags' => 'setTags',
        'content' => 'setContent',
        'design' => 'setDesign',
        'superContent' => 'setSuperContent',
        'customFields' => 'setCustomFields',
        'views' => 'setViews',
        'blocks' => 'setBlocks',
        'minBlocks' => 'setMinBlocks',
        'maxBlocks' => 'setMaxBlocks',
        'channels' => 'setChannels',
        'allowedBlocks' => 'setAllowedBlocks',
        'slots' => 'setSlots',
        'businessUnitAvailability' => 'setBusinessUnitAvailability',
        'sharingProperties' => 'setSharingProperties',
        'template' => 'setTemplate',
        'file' => 'setFile',
        'generateFrom' => 'setGenerateFrom'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'customerKey' => 'getCustomerKey',
        'contentType' => 'getContentType',
        'data' => 'getData',
        'assetType' => 'getAssetType',
        'version' => 'getVersion',
        'locked' => 'getLocked',
        'fileProperties' => 'getFileProperties',
        'name' => 'getName',
        'description' => 'getDescription',
        'category' => 'getCategory',
        'tags' => 'getTags',
        'content' => 'getContent',
        'design' => 'getDesign',
        'superContent' => 'getSuperContent',
        'customFields' => 'getCustomFields',
        'views' => 'getViews',
        'blocks' => 'getBlocks',
        'minBlocks' => 'getMinBlocks',
        'maxBlocks' => 'getMaxBlocks',
        'channels' => 'getChannels',
        'allowedBlocks' => 'getAllowedBlocks',
        'slots' => 'getSlots',
        'businessUnitAvailability' => 'getBusinessUnitAvailability',
        'sharingProperties' => 'getSharingProperties',
        'template' => 'getTemplate',
        'file' => 'getFile',
        'generateFrom' => 'getGenerateFrom'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['customerKey'] = isset($data['customerKey']) ? $data['customerKey'] : null;
        $this->container['contentType'] = isset($data['contentType']) ? $data['contentType'] : null;
        $this->container['data'] = isset($data['data']) ? $data['data'] : null;
        $this->container['assetType'] = isset($data['assetType']) ? $data['assetType'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['locked'] = isset($data['locked']) ? $data['locked'] : null;
        $this->container['fileProperties'] = isset($data['fileProperties']) ? $data['fileProperties'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['content'] = isset($data['content']) ? $data['content'] : null;
        $this->container['design'] = isset($data['design']) ? $data['design'] : null;
        $this->container['superContent'] = isset($data['superContent']) ? $data['superContent'] : null;
        $this->container['customFields'] = isset($data['customFields']) ? $data['customFields'] : null;
        $this->container['views'] = isset($data['views']) ? $data['views'] : null;
        $this->container['blocks'] = isset($data['blocks']) ? $data['blocks'] : null;
        $this->container['minBlocks'] = isset($data['minBlocks']) ? $data['minBlocks'] : null;
        $this->container['maxBlocks'] = isset($data['maxBlocks']) ? $data['maxBlocks'] : null;
        $this->container['channels'] = isset($data['channels']) ? $data['channels'] : null;
        $this->container['allowedBlocks'] = isset($data['allowedBlocks']) ? $data['allowedBlocks'] : null;
        $this->container['slots'] = isset($data['slots']) ? $data['slots'] : null;
        $this->container['businessUnitAvailability'] = isset($data['businessUnitAvailability']) ? $data['businessUnitAvailability'] : null;
        $this->container['sharingProperties'] = isset($data['sharingProperties']) ? $data['sharingProperties'] : null;
        $this->container['template'] = isset($data['template']) ? $data['template'] : null;
        $this->container['file'] = isset($data['file']) ? $data['file'] : null;
        $this->container['generateFrom'] = isset($data['generateFrom']) ? $data['generateFrom'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['customerKey'] === null) {
            $invalidProperties[] = "'customerKey' can't be null";
        }
        if ($this->container['assetType'] === null) {
            $invalidProperties[] = "'assetType' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return float
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param float $id The id of the asset
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets customerKey
     *
     * @return string
     */
    public function getCustomerKey()
    {
        return $this->container['customerKey'];
    }

    /**
     * Sets customerKey
     *
     * @param string $customerKey Reference to customer's private ID/name for the asset
     *
     * @return $this
     */
    public function setCustomerKey($customerKey)
    {
        $this->container['customerKey'] = $customerKey;

        return $this;
    }

    /**
     * Gets contentType
     *
     * @return string
     */
    public function getContentType()
    {
        return $this->container['contentType'];
    }

    /**
     * Sets contentType
     *
     * @param string $contentType The type that the content attribute will be in
     *
     * @return $this
     */
    public function setContentType($contentType)
    {
        $this->container['contentType'] = $contentType;

        return $this;
    }

    /**
     * Gets data
     *
     * @return object
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param object $data Property bag containing the asset data
     *
     * @return $this
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets assetType
     *
     * @return \SalesForce\MarketingCloud\Model\AssetType
     */
    public function getAssetType()
    {
        return $this->container['assetType'];
    }

    /**
     * Sets assetType
     *
     * @param \SalesForce\MarketingCloud\Model\AssetType $assetType assetType
     *
     * @return $this
     */
    public function setAssetType($assetType)
    {
        $this->container['assetType'] = $assetType;

        return $this;
    }

    /**
     * Gets version
     *
     * @return float
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param float $version The version of the asset
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets locked
     *
     * @return bool
     */
    public function getLocked()
    {
        return $this->container['locked'];
    }

    /**
     * Sets locked
     *
     * @param bool $locked Specifies if the asset can be modified or not
     *
     * @return $this
     */
    public function setLocked($locked)
    {
        $this->container['locked'] = $locked;

        return $this;
    }

    /**
     * Gets fileProperties
     *
     * @return object
     */
    public function getFileProperties()
    {
        return $this->container['fileProperties'];
    }

    /**
     * Sets fileProperties
     *
     * @param object $fileProperties Stores the different properties that this asset refers to if it is a file type
     *
     * @return $this
     */
    public function setFileProperties($fileProperties)
    {
        $this->container['fileProperties'] = $fileProperties;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the asset, set by the client
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of the asset, set by the client
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets category
     *
     * @return object
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param object $category ID of the category the asset belongs to
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[] $tags List of tags associated with the asset
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets content
     *
     * @return string
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string $content The actual content of the asset
     *
     * @return $this
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets design
     *
     * @return string
     */
    public function getDesign()
    {
        return $this->container['design'];
    }

    /**
     * Sets design
     *
     * @param string $design Fallback for display when neither content nor supercontent are provided
     *
     * @return $this
     */
    public function setDesign($design)
    {
        $this->container['design'] = $design;

        return $this;
    }

    /**
     * Gets superContent
     *
     * @return string
     */
    public function getSuperContent()
    {
        return $this->container['superContent'];
    }

    /**
     * Sets superContent
     *
     * @param string $superContent Content that supersedes content in terms of display
     *
     * @return $this
     */
    public function setSuperContent($superContent)
    {
        $this->container['superContent'] = $superContent;

        return $this;
    }

    /**
     * Gets customFields
     *
     * @return object
     */
    public function getCustomFields()
    {
        return $this->container['customFields'];
    }

    /**
     * Sets customFields
     *
     * @param object $customFields Custom fields within an asset
     *
     * @return $this
     */
    public function setCustomFields($customFields)
    {
        $this->container['customFields'] = $customFields;

        return $this;
    }

    /**
     * Gets views
     *
     * @return object
     */
    public function getViews()
    {
        return $this->container['views'];
    }

    /**
     * Sets views
     *
     * @param object $views Views within an asset
     *
     * @return $this
     */
    public function setViews($views)
    {
        $this->container['views'] = $views;

        return $this;
    }

    /**
     * Gets blocks
     *
     * @return object
     */
    public function getBlocks()
    {
        return $this->container['blocks'];
    }

    /**
     * Sets blocks
     *
     * @param object $blocks Blocks within the asset
     *
     * @return $this
     */
    public function setBlocks($blocks)
    {
        $this->container['blocks'] = $blocks;

        return $this;
    }

    /**
     * Gets minBlocks
     *
     * @return float
     */
    public function getMinBlocks()
    {
        return $this->container['minBlocks'];
    }

    /**
     * Sets minBlocks
     *
     * @param float $minBlocks Minimum number of blocks within an asset
     *
     * @return $this
     */
    public function setMinBlocks($minBlocks)
    {
        $this->container['minBlocks'] = $minBlocks;

        return $this;
    }

    /**
     * Gets maxBlocks
     *
     * @return float
     */
    public function getMaxBlocks()
    {
        return $this->container['maxBlocks'];
    }

    /**
     * Sets maxBlocks
     *
     * @param float $maxBlocks Maximum number of blocks within an asset
     *
     * @return $this
     */
    public function setMaxBlocks($maxBlocks)
    {
        $this->container['maxBlocks'] = $maxBlocks;

        return $this;
    }

    /**
     * Gets channels
     *
     * @return object
     */
    public function getChannels()
    {
        return $this->container['channels'];
    }

    /**
     * Sets channels
     *
     * @param object $channels List of channels that are allowed to use this asset
     *
     * @return $this
     */
    public function setChannels($channels)
    {
        $this->container['channels'] = $channels;

        return $this;
    }

    /**
     * Gets allowedBlocks
     *
     * @return string[]
     */
    public function getAllowedBlocks()
    {
        return $this->container['allowedBlocks'];
    }

    /**
     * Sets allowedBlocks
     *
     * @param string[] $allowedBlocks List of blocks that are allowed in the asset
     *
     * @return $this
     */
    public function setAllowedBlocks($allowedBlocks)
    {
        $this->container['allowedBlocks'] = $allowedBlocks;

        return $this;
    }

    /**
     * Gets slots
     *
     * @return object
     */
    public function getSlots()
    {
        return $this->container['slots'];
    }

    /**
     * Sets slots
     *
     * @param object $slots Slots within the asset
     *
     * @return $this
     */
    public function setSlots($slots)
    {
        $this->container['slots'] = $slots;

        return $this;
    }

    /**
     * Gets businessUnitAvailability
     *
     * @return object
     */
    public function getBusinessUnitAvailability()
    {
        return $this->container['businessUnitAvailability'];
    }

    /**
     * Sets businessUnitAvailability
     *
     * @param object $businessUnitAvailability A dictionary of member IDs that have been granted access to the asset
     *
     * @return $this
     */
    public function setBusinessUnitAvailability($businessUnitAvailability)
    {
        $this->container['businessUnitAvailability'] = $businessUnitAvailability;

        return $this;
    }

    /**
     * Gets sharingProperties
     *
     * @return \SalesForce\MarketingCloud\Model\SharingProperties
     */
    public function getSharingProperties()
    {
        return $this->container['sharingProperties'];
    }

    /**
     * Sets sharingProperties
     *
     * @param \SalesForce\MarketingCloud\Model\SharingProperties $sharingProperties sharingProperties
     *
     * @return $this
     */
    public function setSharingProperties($sharingProperties)
    {
        $this->container['sharingProperties'] = $sharingProperties;

        return $this;
    }

    /**
     * Gets template
     *
     * @return object
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     *
     * @param object $template Template the asset follows
     *
     * @return $this
     */
    public function setTemplate($template)
    {
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets file
     *
     * @return string
     */
    public function getFile()
    {
        return $this->container['file'];
    }

    /**
     * Sets file
     *
     * @param string $file Base64-encoded string of a file associated with an asset
     *
     * @return $this
     */
    public function setFile($file)
    {
        $this->container['file'] = $file;

        return $this;
    }

    /**
     * Gets generateFrom
     *
     * @return string
     */
    public function getGenerateFrom()
    {
        return $this->container['generateFrom'];
    }

    /**
     * Sets generateFrom
     *
     * @param string $generateFrom Tells the sending compiler what view to use for generating this view's content
     *
     * @return $this
     */
    public function setGenerateFrom($generateFrom)
    {
        $this->container['generateFrom'] = $generateFrom;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


